before_dying {
  %w(rpick_guild_info_parser_hook
     rpick_inventory_parser_hook
     rpick_toolkit_parser_hook
     rpick_broken_pick_parser_hook
     rpick_box_parser_hook).each do |h|
    DownstreamHook.remove(h)
  end
}

def kick_off_workflow(picker, script, ancillary)
  picker.inventory_manager.clear_hands
  sleep 3
  ancillary.preflight_check if UserVars.rpick[:speech_and_misc][:perform_preflight_check]

  if UserVars.rpick[:lock_handling][:calibrate_calipers_on_start]
    ancillary.calibrate_calipers
  end

  workflow_type = script.vars[1..-1].select{|v| v =~ /worker|other|ground/ }.first
  workflow      = case workflow_type
                  when 'worker'
                    Rpick::Workflows::LocksmithPoolBoxes.new(picker, script)
                  when 'other'
                    Rpick::Workflows::CustomerBoxes.new(picker, script)
                  when 'ground'
                    Rpick::Workflows::GroundBoxes.new(picker, script)
                  else
                    Rpick::Workflows::OwnBoxes.new(picker, script)
                  end

  workflow.run
end

# Entry point
session_settings = {
  always_use_vaalin: script.vars.include?('v'),
  start_with_copper: script.vars.include?('c'),
  loot_from_ground: script.vars.include?('loot'),
  relock_boxes: script.vars.include?('relock'),
  disarm_only: script.vars.include?('disarm'),
  workflow: script.vars[1..-1].select{|v| %(worker other ground) }.first || 'self'
}

if script.vars[1] == 'setup'
  Rpick::Setup.run
  exit
end

picker = Rpick::Picker.new(UserVars.rpick, session_settings)
ancillary = Rpick::AncillaryActions.new(picker, script)
sleep 2 # FIXME Kill this when everything lives in this file


if script.vars[1] == 'buy'
  sleep 2
  exit
end

if script.vars[1] == 'repair'
  if picker.can_repair_lockpicks?
    if picker.has_broken_lockpicks?
      ancillary.repair_lockpicks
      exit
    else
      echo "You don't have any broken lockpicks! Congratulations!"
      exit
    end
  else
    echo "You do not have sufficient skill to repair lockpicks"
    exit
  end
end

if script.vars[1] == 'calibrate'
  ancillary.calibrate_calipers
  exit
end

kick_off_workflow(picker, script, ancillary)
